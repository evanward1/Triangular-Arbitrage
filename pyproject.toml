[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "triangular-arbitrage"
dynamic = ["version"]
description = "Production-grade triangular arbitrage trading system"
authors = [
    {name = "Triangular Arbitrage Team", email = "dev@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
]
dependencies = [
    "pydantic>=2.0,<3.0",
    "pyyaml>=6.0,<7.0",
    "prometheus-client>=0.16,<1.0",
    "requests>=2.28,<3.0",
    "websockets>=11.0,<12.0",
    "numpy>=1.21,<2.0",
    "pandas>=1.5,<3.0",
    "aiohttp>=3.8,<4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.0",
    "black>=23.0",
    "isort>=5.12",
    "flake8>=6.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
]
test = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
]
docs = [
    "mkdocs>=1.4",
    "mkdocs-material>=9.0",
]

[project.scripts]
triangular-arbitrage = "run_strategy:main"
validate-config = "tools.validate_config:main"
backtest-runner = "backtests.run_backtest:main"
monitor-cycles = "monitor_cycles:main"

[project.urls]
Homepage = "https://github.com/example/triangular-arbitrage"
Documentation = "https://triangular-arbitrage.readthedocs.io/"
Repository = "https://github.com/example/triangular-arbitrage"
"Bug Tracker" = "https://github.com/example/triangular-arbitrage/issues"

[tool.setuptools.packages.find]
include = ["triangular_arbitrage*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
triangular_arbitrage = ["py.typed"]

[tool.setuptools.dynamic]
version = {attr = "triangular_arbitrage.version.__version__"}

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | backtests/data
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["triangular_arbitrage"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true

# Ignore specific modules that don't have type stubs
[[tool.mypy.overrides]]
module = [
    "prometheus_client.*",
    "websockets.*",
    "aiohttp.*",
    "ccxt.*",
]
ignore_missing_imports = true

# Allow some flexibility for tests
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=triangular_arbitrage",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["triangular_arbitrage"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\(.*Protocol.*\\):",
    "@(abc\\\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"